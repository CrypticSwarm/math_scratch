
# 32.a1 (2^5)

```sage
p = 2

def your_formula_for_conductor_exponent(k):
    offsets = [0, 4, 4, 7, 2, 10, 6, 13, 4, 16, 8, 19]
    mod2_offset = [6, 18]
    return k + offsets[k % 12] + mod2_offset[k % 2] * (k // 12)

def your_formula_for_degree(k):
    offsets = [1, 0, 0, 0, 2, 0, 1, 0, 3, 0, 2, 0]
    mod2_offset = [3, 0]
    return offsets[k % 12] + mod2_offset[k % 2] * (k // 12)
```

# 64.a1 (2^6)

```sage
p = 2

def your_formula_for_conductor_exponent(k):
    offsets = [0, 5, 4, 9, 2, 13, 6, 17, 4, 21, 8, 25]
    mod2_offset = [6, 24]
    return k + offsets[k % 12] + mod2_offset[k % 2] * (k // 12)

def your_formula_for_degree(k):
    offsets = [1, 0, 0, 0, 2, 0, 1, 0, 3, 0, 2, 0]
    mod2_offset = [3, 0]
    return offsets[k % 12] + mod2_offset[k % 2] * (k // 12)
```

# 128.a1 (2^7)

```sage
p = 2

def your_formula_for_conductor_exponent(k):
    offsets = [0, 6, 6, 11, 6, 16, 10, 21, 10, 26, 16, 31]
    mod2_offset = [14, 30]
    return k + offsets[k % 12] + mod2_offset[k % 2] * (k // 12)

def your_formula_for_degree(k):
    offsets = [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0]
    mod2_offset = [1, 0]
    return offsets[k % 12] + mod2_offset[k % 2] * (k // 12)
```

# 256.a1 (2^8)

```sage
p = 2

def your_formula_for_conductor_exponent(k):
    offsets = [0, 7, 4, 13, 2, 19, 6, 25, 4, 31, 8, 37]
    mod2_offset = [6, 36]
    return k + offsets[k % 12] + mod2_offset[k % 2] * (k // 12)

def your_formula_for_degree(k):
    offsets = [1, 0, 1, 0, 3, 0, 3, 0, 5, 0, 5, 0]
    mod2_offset = [6, 0]
    return offsets[k % 12] + mod2_offset[k % 2] * (k // 12)
```

# 20.a1 (2^2 * 5)
# 36.a1 (2^2 * 3^2)

```sage
p = 2

def your_formula_for_conductor_exponent(k):
    offsets = [0, 1, 0, -1, 0, -1, -2, -1, -2, -3, -2, -3]
    mod2_offset = [-4, -4]
    return k + offsets[k % 12] + mod2_offset[k % 2] * (k // 12)

def your_formula_for_degree(k):
    offsets = [1, 0, 1, 2, 1, 2, 3, 2, 3, 4, 3, 4]
    mod2_offset = [4, 4]
    return offsets[k % 12] + mod2_offset[k % 2] * (k // 12)
```

# 36.a1 (2^2 * 3^2)
```sage
p = 3

def your_formula_for_conductor_exponent(k):
    offsets = [0, 1, 0, 1, -2, 1, -2, 1, -4, 1, -4, 1]
    mod2_offset = [-6, 0]
    return k + offsets[k % 12] + mod2_offset[k % 2] * (k // 12)

def your_formula_for_degree(k):
    offsets = [1, 0, 1, 0, 3, 0, 3, 0, 5, 0, 5, 0]
    mod2_offset = [6, 0]
    return offsets[k % 12] + mod2_offset[k % 2] * (k // 12)
```

# 27.a1 (3^3)

```sage
p = 3

def your_formula_for_conductor_exponent(k):
    offsets = [0, 2, 2, 2, 2, 3, 2, 4, 2, 4, 4, 5]
    mod2_offset = [2, 4]
    return k + offsets[k % 12] + mod2_offset[k % 2] * (k // 12)

def your_formula_for_degree(k):
    offsets = [1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 1, 0]
    mod2_offset = [2, 0]
    return offsets[k % 12] + mod2_offset[k % 2] * (k // 12)
```

# 24.a1 (2^3 * 3)
# 40.a1 (2^3 * 5)
# 72.a1 (2^3 * 3^2)

```sage
p = 2

def your_formula_for_conductor_exponent(k):
    offsets = [0, 2, 2, 3, 2, 4, 2, 5, 2, 6, 4, 7]
    mod2_offset = [2, 6]
    return k + offsets[k % 12] + mod2_offset[k % 2] * (k // 12)

def your_formula_for_degree(k):
    offsets = [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0]
    mod2_offset = [1, 0]
    return offsets[k % 12] + mod2_offset[k % 2] * (k // 12)
```

# 72.a1 (2^3 * 3^2)
```
p = 3

def your_formula_for_conductor_exponent(k):
    offsets = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
    mod2_offset = [0, 0]
    return k + offsets[k % 12] + mod2_offset[k % 2] * (k // 12)

def your_formula_for_degree(k):
    offsets = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
    mod2_offset = [0, 0]
    return offsets[k % 12] + mod2_offset[k % 2] * (k // 12)
```

