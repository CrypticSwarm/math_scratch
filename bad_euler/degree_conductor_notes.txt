
# 20.a1 (2^2 * 5)
# 36.a1 (2^2 * 3*2)

```sage
p = 2

def your_formula_for_conductor_exponent(k):
    offsets = [0, 1, 0]
    return k + offsets[k % 3] - (k // 3)

def your_formula_for_degree(k):
    offsets = [1, 0, 1]
    return offsets[k % 3] + (k // 3)
```

# 36.a1 (2^2 * 3*2)
```sage
p = 3

def your_formula_for_conductor_exponent(k):
    offsets = [0, 1, 0, 1]
    return k + offsets[k % 4] + (k % 2 == 0) * (k // 4) * -2

def your_formula_for_degree(k):
    offsets = [1, 0, 1, 0]
    return offsets[k % 4] + (k % 2 == 0) * (k // 4) * 2
```

# 27.a1 (3^3)

```sage
p = 3

def your_formula_for_conductor_exponent(k):
    offsets = [0, 2, 2, 2, 2, 3, 2, 4, 2, 4, 4, 5]
    return k + offsets[k % 12] + (((k % 2 == 0) * -2) + 4) * (k // 12)

def your_formula_for_degree(k):
    offsets = [1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 1, 0]
    return  offsets[k % 12] + (k % 2 == 0) * (k // 12) * 2
```


# 24.a1 (2^3 * 3)
# 40.a1 (2^3 * 5)

```sage
p = 2

def your_formula_for_conductor_exponent(k):
    offsets = [0, 2, 2, 3, 2, 4, 2, 5, 2, 6, 4, 7]
    return k + offsets[k % 12] + (((k % 2 == 0) * -4) + 6) * (k // 12)

def your_formula_for_degree(k):
    offsets = [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0]
    return offsets[k % 12] + (k % 2 == 0) * (k // 12)
```

