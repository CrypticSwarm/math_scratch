
# 20.a1 (2^2 * 5)
# 36.a1 (2^2 * 3*2)

```sage
p = 2

def your_formula_for_conductor_exponent(k):
    offsets = [0, 0, 0]
    return offsets[k % 3] + (((k - 1) // 3) + 1) * 2

def your_formula_for_degree(k):
    offsets = [1, 0, 1]
    return offsets[k % 3] + (k // 3)
```

# 36.a1 (2^2 * 3*2)
```sage
p = 3

def your_formula_for_conductor_exponent(k):
    offsets = [0, -1, 0, -1]
    return (k + 1) + offsets[(k - 1) % 4] + (k % 2 == 0) * (k // 4) * -2

def your_formula_for_degree(k):
    offsets = [1, 0, 1, 0]
    return offsets[k % 4] + (k % 2 == 0) * ((k // 4) << 1)
```

# 27.a1 (3^3)

```sage
p = 3

def your_formula_for_conductor_exponent(k):
    offsets = [0, 0, 0, 0, 1, 0, 2, 0, 2, 2, 3, 0]
    return (k + 2) + offsets[(k - 1) % 12] + (((k & 1) + 1) << 1) * ((k - 1) // 12)

def your_formula_for_degree(k):
    offsets = [1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 1, 0]
    return  offsets[k % 12] + (k % 2 == 0) * (k // 12) * 2
```


# 24.a1 (2^3 * 3)
# 40.a1 (2^3 * 5)

```sage
p = 2

def your_formula_for_conductor_exponent(k):
    offsets = [0, 0, 1, 0, 2, 0, 3, 0, 4, 2, 5, 0]
    return (k + 2) + offsets[(k - 1) % 12] + ((((k & 1) * 2) + 1) << 1) * ((k - 1) // 12)

def your_formula_for_degree(k):
    offsets = [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0]
    return offsets[k % 12] + (k % 2 == 0) * (k // 12)
```

